apiVersion: v1
kind: Template
labels:
  template: ${SERVICE_NAME}-template
metadata:
  name: ${SERVICE_NAME}
  annotations:
    description: Sample Spring
    tags: sample
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    tags:
    - from:
        kind: DockerImage
        name: docker.io/nalbam/${SERVICE_NAME}:${SERVICE_VERSION}
      name: 0.0.1
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${SERVICE_NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 0
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: ${SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: PROFILE
            value: ${PROFILE}
          - name: CONFIG_SERVER_HOST
            value: ${CONFIG_SERVER_HOST}
          - name: CONFIG_SERVER_PORT
            value: ${CONFIG_SERVER_PORT}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - echo
              - ok
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${SERVICE_NAME}
          ports:
          - containerPort: ${SERVICE_PORT}
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: ${SERVICE_PORT}
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MAX_MEMORY}
            requests:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /data
            name: ${SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${SERVICE_NAME}-data
          emptyDir: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${SERVICE_NAME}
        from:
          kind: ImageStreamTag
          name: ${SERVICE_NAME}:${SERVICE_VERSION}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    ports:
    - name: ${SERVICE_PORT}-tcp
      port: ${SERVICE_PORT}
      protocol: TCP
      targetPort: ${SERVICE_PORT}
    selector:
      deploymentconfig: ${SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    port:
      targetPort: ${SERVICE_PORT}-tcp
    to:
      kind: Service
      name: ${SERVICE_NAME}
      weight: 100
parameters:
- displayName: Service Name
  name: SERVICE_NAME
  required: true
  value: sample-spring
- displayName: Service Version
  name: SERVICE_VERSION
  required: true
  value: alpine
- displayName: Service Port
  name: SERVICE_PORT
  required: true
  value: 8080
- displayName: Max Memory
  name: MAX_MEMORY
  required: true
  value: 1Gi
- displayName: PROFILE
  name: PROFILE
  required: true
  value: default
- displayName: CONFIG_SERVER_HOST
  name: CONFIG_SERVER_HOST
  required: true
  value: config-server
- displayName: CONFIG_SERVER_PORT
  name: CONFIG_SERVER_PORT
  required: true
  value: 8888
